/*
Copyright 2025 The Flux authors

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

package v1beta1

import (
	"time"

	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"

	"github.com/fluxcd/pkg/apis/meta"
)

const ArtifactGeneratorKind = "ArtifactGenerator"

// ArtifactGeneratorSpec defines the desired state of ArtifactGenerator.
type ArtifactGeneratorSpec struct {
	// Sources is a list of references to the Flux source-controller
	// resources that will be used to generate the artifact.
	// +kubebuilder:validation:MinItems=1
	// +required
	Sources []SourceReference `json:"sources"`

	// OutputArtifacts is a list of output artifacts to be generated.
	// +kubebuilder:validation:MinItems=1
	// +required
	OutputArtifacts []OutputArtifact `json:"artifacts"`
}

// SourceReference contains the reference to a Flux source-controller resource.
type SourceReference struct {
	// Alias of the source within the ArtifactGenerator context.
	// The alias must be unique per ArtifactGenerator, and must consist
	// of lower case alphanumeric characters.
	// +kubebuilder:validation:MinLength=1
	// +kubebuilder:validation:MaxLength=63
	// +kubebuilder:validation:Pattern=`[a-z0-9]([-a-z0-9]*[a-z0-9])?`
	// +required
	Alias string `json:"alias"`

	// Name of the source.
	// +required
	Name string `json:"name"`

	// Namespace of the source.
	// If not provided, defaults to the same namespace as the ArtifactGenerator.
	// +optional
	Namespace string `json:"namespace,omitempty"`

	// Kind of the source.
	// +kubebuilder:validation:Enum=Bucket;GitRepository;OCIRepository
	// +required
	Kind string `json:"kind"`
}

// OutputArtifact defines the output ExternalArtifact generated by the ArtifactGenerator.
type OutputArtifact struct {
	// Name is the name of the generated artifact.
	// +required
	Name string `json:"name"`

	// Revision is the revision of the generated artifact.
	// If specified, it must point to an existing source alias in the format "@<alias>".
	// If not specified, the revision is automatically set to the digest of the artifact content.
	// +kubebuilder:validation:Pattern=`^@([a-z0-9]([-a-z0-9]*[a-z0-9])?)$`
	// +optional
	Revision string `json:"revision,omitempty"`

	// Copy defines a list of copy operations to perform from the sources to the generated artifact.
	// The copy operations are performed in the order they are listed with existing files
	// being overwritten by later copy operations.
	// +kubebuilder:validation:MinItems=1
	// +required
	Copy []CopyOperation `json:"copy"`
}

type CopyOperation struct {
	// From specifies the source (by alias) and the glob pattern to match files.
	// The format is "@<alias>/<glob-pattern>".
	// +kubebuilder:validation:Pattern=`^@([a-z0-9]([-a-z0-9]*[a-z0-9])?)/(.*)$`
	// +required
	From string `json:"from"`

	// To specifies the destination path within the artifact.
	// The format is "@artifact/path", the alias "artifact"
	// refers to the root path of the generated artifact.
	// +kubebuilder:validation:Pattern=`^@(artifact)/(.*)$`
	// +required
	To string `json:"to"`
}

// ArtifactGeneratorStatus defines the observed state of ArtifactGenerator.
type ArtifactGeneratorStatus struct {
	meta.ReconcileRequestStatus `json:",inline"`

	// Conditions holds the conditions for the ArtifactGenerator.
	// +optional
	Conditions []metav1.Condition `json:"conditions,omitempty"`
}

// GetConditions returns the status conditions of the object.
func (in *ArtifactGenerator) GetConditions() []metav1.Condition {
	return in.Status.Conditions
}

// SetConditions sets the status conditions on the object.
func (in *ArtifactGenerator) SetConditions(conditions []metav1.Condition) {
	in.Status.Conditions = conditions
}

// GetRequeueAfter returns the duration after which the ArtifactGenerator
// must be reconciled again.
func (in *ArtifactGenerator) GetRequeueAfter() time.Duration {
	return time.Minute
}

// +kubebuilder:object:root=true
// +kubebuilder:subresource:status

// ArtifactGenerator is the Schema for the artifactgenerators API.
type ArtifactGenerator struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`

	Spec   ArtifactGeneratorSpec   `json:"spec,omitempty"`
	Status ArtifactGeneratorStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// ArtifactGeneratorList contains a list of ArtifactGenerator.
type ArtifactGeneratorList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []ArtifactGenerator `json:"items"`
}

func init() {
	SchemeBuilder.Register(&ArtifactGenerator{}, &ArtifactGeneratorList{})
}
